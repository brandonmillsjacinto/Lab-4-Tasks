/* Filename: Lab 4 Task i.cpp
Author: Brandon Mills Jacinto
Date: 04/03/2025
*/
#include "mbed.h" // I used the Mbed Library for Hardware control.
 
#define NUMBER_OF_AVG_SAMPLES 100 // Defines the number of samples to average (100)
#define TIME_INCREMENT_MS 10 // Define the time increment in milliseconds for each measurement (10)

AnalogIn lm35(A1); // Analog input pin for LM35 temperature sensor
UnbufferedSerial uartUSB(USBTX, USBRX, 115200); // Serial communication for USB at 115200 baud rate

float lm35ReadingsAverage = 0.0; // Variable to store the average of LM35 readings
float lm35ReadingsSum = 0.0; // Variable to store the sum of LM35 readings
float lmReadingsArray[NUMBER_OF_AVG_SAMPLES]; // Array to store individual LM35 readings
float lm35TempC = 0.0; // Variable to store the calculated temperature in Celsius

float analogReadingForLM35Formula(float analogReading); // Function prototype for converting analog reading to temperature

int main ()
{
    while(true) {
        static int lm35SampleIndex = 0; // Static index to keep track of the current sample in the array
        lmReadingsArray[lm35SampleIndex] = lm35.read(); // Reads the analog value from LM35 and stores it in the array
        lm35SampleIndex++; // The sample index goes up by 1
        if (lm35SampleIndex >= NUMBER_OF_AVG_SAMPLES) { // If the index exceeds the array size...
            lm35SampleIndex = 0; // ... Reset the index to 0 to loop back to the beginning of the array
        }

      lm35ReadingsSum = 0.0; // Reset the sum before calculating the new average
      for (int i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) { // Loop through the array
          lm35ReadingsSum += lmReadingsArray[i]; // Add each reading to the sum
      }

      lm35ReadingsAverage = lm35ReadingsSum  / NUMBER_OF_AVG_SAMPLES; // Calculates the average

      lm35TempC = analogReadingForLM35Formula(lm35ReadingsAverage); // Converts the average reading to temperature

      char str[100]; // Character array to store the formatted temperature string
      int stringLength = sprintf(str, "Temperature: %.2f Â°C", lm35TempC); // Formats the temperature string
      uartUSB.write(str, stringLength); // Send the temperature string to serial terminal

      ThisThread::sleep_for(TIME_INCREMENT_MS);  // Wait for the specified time incremen
    }
}

float analogReadingForLM35Formula(float analogReading) // Function to convert analog reading to temperature in Celsius for LM35 sensor. The LM35 outputs 10mV per degree Celsius.

{
    return (analogReading * 3.3 / 0.01); // Converts analog reading to voltage, then to temperature. 
} //analogReading * 3.3 converts the reading to voltage.
    // dividing by 0.01 (10mV) converts the voltage to temperature in celsius.
